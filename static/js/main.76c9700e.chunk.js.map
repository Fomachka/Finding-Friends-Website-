{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundry.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","id","width","height","name","email","CardList","humans","cardsArray","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredHumans","filter","human","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6OAceA,EAZF,SAACC,GACV,OACI,yBAAKC,UAAU,sDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAAMI,IAAMC,MAAQ,MAAMC,OAAO,QAChF,6BACI,4BAAKN,EAAMO,MACX,2BAAIP,EAAMQ,UCaXC,EAjBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAGTC,EAAaD,EAAOE,KAAI,SAACC,EAAMC,GACjC,OAAO,kBAAC,EAAD,CAAMC,IAAOD,EACPV,GAAKM,EAAOI,GAAGV,GACfG,KAAOG,EAAOI,GAAGP,KACjBC,MAAOE,EAAOI,GAAGN,WAGlC,OACI,6BACKG,ICAEK,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,yBAAKjB,UAAU,OACX,2BACIA,UAAU,mCACVkB,KAAK,SACLC,YAAY,iBACZC,SAAUH,MCEXI,EATA,SAACtB,GACZ,OACI,yBAAKuB,MAAO,CAACC,UAAW,SAAUC,OAAQ,iBAAkBnB,OAAQ,UAC/DN,EAAM0B,WCiBJC,G,kBApBX,WAAY3B,GAAO,IAAD,8BACd,4CAAMA,KACD4B,MAAQ,CACTC,UAAU,GAHA,E,+EAOJC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAKzB,OAAGG,KAAKJ,MAAMC,SACH,yDAEJG,KAAKhC,MAAM0B,a,GAjBKQ,cCiDZC,E,YA3CX,aAAe,IAAD,8BACV,+CAaJC,eAAiB,SAACC,GAGd,EAAKJ,SAAS,CAAChB,YAAaoB,EAAMC,OAAOC,SAfzC,EAAKX,MAAQ,CACTlB,OAAQ,GACRO,YAAa,IAJP,E,iFAQM,IAAD,OACfuB,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAACvB,OAAQkC,S,+BAUrC,IAAD,OACEC,EAAiBb,KAAKJ,MAAMlB,OAAOoC,QAAO,SAAAC,GAC5C,OAAOA,EAAMxC,KAAKyC,cAAcC,SAAS,EAAKrB,MAAMX,YAAY+B,kBAEpE,OAAgC,IAA7BhB,KAAKJ,MAAMlB,OAAOwC,OACV,uCAGH,yBAAKjD,UAAU,MACX,wBAAIA,UAAU,MAAd,mBACA,kBAAC,EAAD,CAAWiB,aAAgBc,KAAKI,iBACpC,kBAAC,EAAD,KACI,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAU1B,OAAUmC,W,GAnCtBX,aCKEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACO,kBAAC,EAAD,MACEC,SAASC,eAAe,SDwHpC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.76c9700e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n    return (\r\n        <div className='tc bg-light-grey dib br3 pa3 ma2 grow bw2 shadow-4'>\r\n            <img alt='humans' src={`https://flathash.com/${props.id}`} width = \"200\" height=\"200\"/>\r\n            <div>\r\n                <h2>{props.name}</h2>\r\n                <p>{props.email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../Components/Card';\r\n\r\n\r\nconst CardList = ({humans}) => {\r\n\r\n    /*All loops should have a unique key for react to know which one is to delete*/\r\n    const cardsArray = humans.map((user, i) => {\r\n        return <Card key = {i}\r\n                     id ={humans[i].id} \r\n                     name ={humans[i].name} \r\n                     email={humans[i].email}/>\r\n                })\r\n\r\n    return (\r\n        <div>\r\n            {cardsArray}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return(\r\n        <div className='pa2'>\r\n            <input \r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search' \r\n                placeholder='Search Profile' \r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\n// Creates a scrollable component within the page\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '2px solid pink', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\ncomponentDidCatch(error,info) {\r\n    this.setState({hasError: true})\r\n\r\n}\r\n\r\nrender() {\r\n    if(this.state.hasError){\r\n        return <h1> Ooops. We have an error </h1>;\r\n    }\r\n    return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;   ","import React, {Component} from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport Scroll from '../Components/Scroll';\r\nimport './App.css';\r\nimport ErrorBoundry from '../Components/ErrorBoundry'\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            humans: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response=> response.json())\r\n            .then(users => this.setState({humans: users}));    \r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        //Changes state of the search engine\r\n        //typed value is printed in a console\r\n        this.setState({searchfield: event.target.value});\r\n    }\r\n\r\n\r\n    render(){\r\n        const filteredHumans = this.state.humans.filter(human =>{\r\n            return human.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        })\r\n        if(this.state.humans.length === 0){\r\n            return <h1>Loading</h1>\r\n        }\r\n            return(\r\n                <div className='tc'>\r\n                    <h1 className='f1'> Human Friends </h1>\r\n                    <SearchBox searchChange = {this.onSearchChange}/>\r\n                <Scroll>\r\n                    <ErrorBoundry> \r\n                    <CardList humans = {filteredHumans}/>\r\n                    </ErrorBoundry>\r\n                </Scroll>    \r\n                </div>\r\n                \r\n            );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\n//greeting is a property for a class Hello\nReactDOM.render(\n                <App />\n                , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}